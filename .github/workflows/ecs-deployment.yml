name: Deploy ECS

on:
  workflow_dispatch:  # This allows manual triggering of the workflow

jobs:
  terraform:
    name: Apply Terraform configuration
    runs-on: ubuntu-latest

    env:   
      AWS_REGION: ${{ secrets.AWS_REGION }}    # You can also store the region in a secret if needed
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_TECHNEWS_YAN }}  
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_TECHNEWS_YAN }}  

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}  
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}  
          aws-region: ${{ env.AWS_REGION }}  

      # Run Terraform in ./load_balancer directory
      - name: Initialize Terraform (Load Balancer)
        run: terraform init
        working-directory: ./load_balancer

      - name: Terraform Plan (Load Balancer)
        run: terraform plan
        working-directory: ./load_balancer

      - name: Terraform Apply (Load Balancer)
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve
        working-directory: ./load_balancer

     # Commit terraform.tfstate back to the repository
      - name: Commit Terraform State File
        if: github.ref == 'refs/heads/main'
        run: |
          git add ./load_balancer/terraform.tfstate
          git commit -m "Save terraform.tfstate for load_balancer"
          git push
        working-directory: ./load_balancer

       # Wait for 5 minutes with a countdown timer
      - name: Wait for Load Balancer setup to stabilize
        run: |
          for i in {1..5}; do
            echo "Waiting... $((i * 60)) seconds have passed out of 300 seconds (5 minutes)."
            sleep 60
          done

      # Run Terraform in ./frontend directory
      - name: Initialize Terraform (Frontend)
        run: terraform init
        working-directory: ./frontend

      - name: Terraform Plan (Frontend)
        run: terraform plan
        working-directory: ./frontend

      - name: Terraform Apply (Frontend)
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve
        working-directory: ./frontend

      # Run Terraform in ./backend directory
      - name: Initialize Terraform (Backend)
        run: terraform init
        working-directory: ./backend

      - name: Terraform Plan (Backend)
        run: terraform plan
        working-directory: ./backend

      - name: Terraform Apply (Backend)
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve
        working-directory: ./backend
